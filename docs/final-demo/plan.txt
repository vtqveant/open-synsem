Демонстрация

1. Введение. Постановка задачи.

Управление умным домом (различным оборудованием) - различные способы управления, в т.ч. естественно-языковой
(распознавание речи).

2. Исходные требования, допущения, предпосылки:

  а) Командный режим работы. Это не диалог, не IVR система. Естесвенно-языковое взаимодействие - одностороннее, только
  от пользователя к системе. Обратная связь от системы и оборудования - через изменение состояния устройств,
  пользовательский интерфейс (GUI), носимые устройства, звуковые сигналы и пр., но никогда не через TTS, т.е. не диалог,
  никаких уточнений и наводящих вопросов от системы, никакой mixed initiative).
  б) Контролируемый язык. Это не диктовка, набор языковых конструкций мы контролируем, ограниченный домен. Но языковые
  возможности должны быть достаточно гибкими, чтобы не было необходимости снабжать систему мануалом. (Две крайности,
  которых хотелось бы избежать: всё что угодно vs. список команд для заучивания). Этих двух крайностей можно избежать
  в силу того, что мы работаем с очень узкой предметной областью. Условно: все возможные способы говорить об очень
  небольшом числе вещей, напр. "как угодно, но только про лампочки".
  в) Дискурс. Хотя это не диалоговая система, мы предполагаем, что взаимодействие пользователя может быть "сессионным",
  система поддерживает контекст взаимодействия в пределах сессии, в пределах сессии пользователь может чего-то не
  уточнять, предполагать известным, ссылаться на текущее состояние системы и т.п.

(Технические) следствия из этих предпосылок:

  а) Пользователей мало, но они взаимодействую постоянно, степень успешных взаимодействие должна быть большой, (не как
  в чатботе, где всегда есть процент неудовлетворенных пользователей, но большую часть людей ему удается успешно
  развлечь один-два раза). Предпосылки к применению глубоких и вычислительно тяжелый методов. За счет этого мы хотим
  добиться существенного повышения качества анализа.


3. Откуда ноги растут.

Задачи: Recognizion Textual Entailment, управление роботами и т.п.
        (см. напр. SemEval-2014 Task 6, Supervised Semantic Parsing of Robotic Spatial Commands, http://alt.qcri.org/semeval2014/task6/)
Известные решения: C&C Tools, LKB
Семантика: теоретико-модельные подходы, Blackburn-Bos, различные варианды синтактико-семантического интерфейса и пр.
Искусственный интеллект: model builders, model checkers, символьные методы в NLP; interactive grounding (say, in robotic perception)


4. Подход, предложенный в результате анализа.

Hypothesis generation + filtering.


5. Цели, ставившиеся перед прототипом

1) Работа с русским языком
2) Работа с неоднозначностью
3) Оценка реализуемости и трудоемкости
4) Оценка возможностей имеющихся open-source решений для работы с deep semantic parsing.
5) Оценка возможности интеграции в существующую инфраструктуру - вкл. интеграцию с ASR
6) Оценка вариативности языковых конструкций, поддающихся реализации с помощью этого подхода. (Use cases по
языковым конструкциям)

Цели, НЕ ставившиеся

1) быстродействие
2) покрытие use-cases по сценариям использования системы конечным пользователем


6. Цели этой демонстрации

1) рассказать о теоретических основах подхода
2) рассказать об используемых компонентах
3) рассказать об используемых формализмах
4) посмотреть на реализацию разборов конкретных типов предложений с подробным разбором решаемых проблем
5) дать оценки по исходным задачам прототипа
6) рассказать об ограничених текущего прототипа и как их можно решать (портирование hlmc и т.п.)
7) рассказать, что еще не было сделано (query expansion, вычисление оценок гипотез на разных этапах обработки,
компонент принятия решений на основе гипотез и их оценок)
8) рассказать о дополнительных возможностях, которые может предостаавить выбранный подход (realization, генерация
правого контекста по синтаксической категории для ASR priming)


6. Технологии и теорминимум.

Теорминимум
а). Мультимодальные комбинаторные категориальные грамматики (MMCCG)
б). Hybrid Logic, Hybrid Logic Dependency Semantics (HLDS)
в). Model Checking, Hybrid Logic Model Checker (HLMC) - графовые модели, hl и xml, задача mc для hl.

Технологии
a) OpenCCG
б) Грамматика Moloko (http://www.cognitivesystems.org/, http://talkingrobots.dfki.de/)
в) HLMC. Алгоритмы MCLite, MCFull


==Примеры==

1. лампа
	варианты разбора - морфология и разные категории
	атрибуты в расширенном представлении категории (грамматические и семантические - T_O:thing)
2. красная лампа
3. включи красную лампу
4. выключи красную лампу
5. включи красную лампу на кухне
6. включи лампу на кухне
7. включи красную лампу и подсветку
8. включи красную лампу на кухне и подсветку
9. включи красную лампу и подсветку на кухне
10. включи лампу на кухне и подсветку в прихожей
11. включи лампу и выключи подсветку
12. включи красную лампу и выключи лампу на кухне
13. включи красную лампу и закрой шторы на кухне
14. включи и выключи лампу
15. включи и выключи лампу на кухне
16. включи и выключи лампу и подсветку на кухне
17. включи лампу и лампочку и подсветку на кухне   --- проблема с грамматикой
18. включи и выключи лампу на кухне и подсветку в прихожей
19. включи и выключи лампу на столе и подсветку в прихожей


Замечания

1. про необходимость второй онтологии для валидации моделей - не нужно, т.к. HL + графовая модель уже ими являются;
OpenCCG возвращает типы объектов, я уже знаю, какие они, просто выбросил их при конвертации в hmlc, т.к. hlmc не
умеет проверять типы узлов; при портировании MCFull нужно будет реализовать такие проверки. (напр., тогда можно будет
знать, что стол может стоять в прихожей, а кухня не может стоять в прихожей). Задача валидации и нахождения ошибок
в моделях тогда сведется к проверки выполнимости некоторого набора общих утверждений о типах узлов в HL, одновременно
model checker сможет сразу выявить проблемные узлы и определить тип проблемы, выдача таких проверок в виде файла
может служить целям регрессионного тестирования моделей и т.п.


Ссылки, видео

http://www.youtube.com/watch?v=UGySVGeLtIs - Ассистент, управление умным домом
